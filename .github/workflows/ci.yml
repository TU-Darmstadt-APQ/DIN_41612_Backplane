name: "KiCad CI/CD to create manufacturing files"

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - "*"
    paths:
      - '*.kicad_sch'
      - '*.kicad_pcb'
      - 'footprints.pretty/*'
      - 'footprints_project_specific.pretty/*'
      - 'libraries/*'
      - '.github/workflows/manufacturing_files.yml'
      - 'config.kibot.yml'
    # Ignore the push event when creating tags
    tags-ignore:
      - '[0-9]+.[0-9]+.[0-9]+'
  release:
    types:
      - published

env:
  SCHEMATIC_FILE: main.kicad_sch
  PCB_FILE: main.kicad_pcb

jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    outputs:
      revision: ${{ steps.extract_sch_revision.outputs.revision }}

    steps:
      - name: Download repository
        uses: actions/checkout@v4

      - name: Extract schematic revision
        id: extract_sch_revision
        run: |
          echo "revision=$(perl -0777 -ne "print /\(title_block.+\(rev \"(.+?)\"\)/sg" ${{ env.SCHEMATIC_FILE }})" >>${GITHUB_OUTPUT}

      - name: Extract pcb revision
        id: extract_pcb_revision
        run: |
          echo "revision=$(perl -0777 -ne "print /\(title_block.+\(rev \"(.+?)\"\)/sg" ${{ env.PCB_FILE }})" >>${GITHUB_OUTPUT}

      - name: Test if the revision number was extracted
        if: steps.extract_sch_revision.outputs.revision == ''
        run: |
          echo "::error::Failed to extract revision number from schematic file: ${{ env.SCHEMATIC_FILE }}"
          exit 1

      - name: Test schematic revision == pcb revision
        if: steps.extract_sch_revision.outputs.revision != steps.extract_pcb_revision.outputs.revision
        run: |
          echo "::error::Revision number of the schematic (${{ steps.extract_sch_revision.outputs.revision }}) does not match PCB (${{ steps.extract_pcb_revision.outputs.revision }})"
          exit 1

  ERC:
    name: Run ERC
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Download repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Run ERC
        uses: INTI-CMNB/KiBot@v2_k7
        with:
          schema: ${{ env.SCHEMATIC_FILE }}
          dir: generated
          skip: run_drc
          targets: __NONE__  # Only run preflights

      - name: Retrieve results
        uses: actions/upload-artifact@v3
        with:
          name: ERC_Output
          path: generated

  DRC:
    name: Run DRC
    runs-on: ubuntu-latest
    needs: ERC

    steps:
      - name: Download repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Run DRC
        uses: INTI-CMNB/KiBot@v2_k7
        with:
          board: ${{ env.PCB_FILE }}
          dir: generated
          skip: run_erc
          targets: __NONE__  # Only run preflights

      - name: Retrieve results
        uses: actions/upload-artifact@v3
        with:
          name: DRC_Output
          path: generated

  fabrication_output:
    name: 'Produce fabrication outputs'
    runs-on: ubuntu-latest
    needs: [ERC, DRC]
    strategy:
      matrix:
        variant: [ 'default', 'HBME', 'TFP' ]
    steps:
      - name: Download repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - uses: INTI-CMNB/KiBot@v2_k7
        with:
          config: config.kibot.yaml
          schema: ${{ env.SCHEMATIC_FILE }}
          board: ${{ env.PCB_FILE }}
          skip: run_erc,run_drc
          variant: ${{ matrix.variant }}
          verbose: 0  # use 3 for debugging

      - name: Upload bill of materials files as artifact
        uses: actions/upload-artifact@v3
        with:
          name: bom
          path: bom_files_compressed

      - name: Upload schematic files as artifact
        uses: actions/upload-artifact@v3
        with:
          name: schematics
          path: schematics

      - name: Upload schematic files as artifact
        uses: actions/upload-artifact@v3
        with:
          name: gerber_files
          path: gerber_files_compressed

  release:
    name: 'Upload manufacturing files to release'
    runs-on: ubuntu-latest
    needs: [tests, fabrication_output]
    if: github.event_name == 'release'
    strategy:
      matrix:
        variant: [ 'default', 'HBME', 'TFP' ]
    steps:
      - name: Download manufacturing files artifact
        uses: actions/download-artifact@v3
        with:
          path: ./manufacturing_files

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: ./manufacturing_files

      - name: Upload bom
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./manufacturing_files/bom/bom_(${{ matrix.variant }}).zip
          asset_name: bom_${{ matrix.variant }}.zip
          asset_content_type: application/zip

      - name: Upload schematics
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./manufacturing_files/schematics/schematics_(${{ matrix.variant }}).pdf
          asset_name: schematics_${{needs.tests.outputs.revision}}_${{ matrix.variant }}.pdf
          asset_content_type: application/pdf

      - name: Upload position files
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./manufacturing_files/gerber_files/pos_(${{ matrix.variant }}).zip
          asset_name: position_files_${{ matrix.variant }}.zip
          asset_content_type: application/zip

      - name: Upload gerber files
        uses: actions/upload-release-asset@v1
        if: matrix.variant == 'default'  # The Gerber files are the same for all variants
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./manufacturing_files/gerber_files/gerbers.zip
          asset_name: gerber_files_all.zip
          asset_content_type: application/zip
